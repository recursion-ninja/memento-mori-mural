on:
  # Build every pull request, to check for regressions.
  pull_request:

  # Build when a PR is merged, to update the README's CI badge.
  push:

name: build

env:
  ghc_default: '8.10.4'

defaults:
  run:
    shell: bash

jobs:

  weeder:
    name: Dead Code Check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2.3.4
      - uses: haskell/actions/setup@v1.1.5
        name: Setup Haskell
        with:
          cabal-version: latest
          ghc-version:   ${{ env.ghc_default }} 

      - run: make dead-code-check-setup ghc=${{ env.ghc_default }} 
      
      - uses: actions/cache@v2
        name: caching dead code check
        with:
          path: |
            bin
          key: ${{ runner.os }}-dead-code-${{ hashFiles('cabal.project.freeze') }}

      - run: make dead-code-check-deploy ghc=${{ env.ghc_default }} 


  haddock:
    name: Documentation Check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2.3.4
      - uses: haskell/actions/setup@v1.1.5
        name: Setup Haskell
        with:
          cabal-version: latest
          ghc-version:   ${{ env.ghc_default }}
                  
      - run: make documentation-check-setup ghc=${{ env.ghc_default }} 

      - uses: actions/cache@v2
        name: caching documetation check
        with:
          path: |
            ~/.cabal/store
            dist-newstyle
          key: ${{ runner.os }}-documetation-${{ hashFiles('cabal.project.freeze') }}

      - run: make documentation-check-deploy ghc=${{ env.ghc_default }} 


  # Run Stylish Haskell to check for errant code formatting
  formatter:
    name: Formatting Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.4
      - uses: haskell/actions/setup@v1.1.5
        name: Setup Haskell
        with:
          cabal-version: latest
          ghc-version:   ${{ env.ghc_default }}

      - run: make formatting-check ghc=${{ env.ghc_default }} 

      - uses: actions/cache@v2
        name: caching formatting check
        with:
          path: |
            ~/bin
            ~/.cabal/store
            dist-newstyle
          key: ${{ runner.os }}-formatting-${{ hashFiles('dist-newstyle') }}


  # Run HLint to check for code improvements
  hlint:
    name: Linter Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.4
      - run: make hlint-check


  # Check that the project builds with the specified lower bounds.
  lower-bounds:
    name: Lower Bounds Check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2.3.4
      - uses: haskell/actions/setup@v1.1.5
        name: Setup Haskell
        with:
          cabal-version: latest
          ghc-version:   7.10.3

      - run: make lower-bounds-check-setup

      - uses: actions/cache@v2
        name: caching lower bounds check
        with:
          path: |
            ~/.cabal/store
            dist-newstyle
          key: ${{ runner.os }}-lower-bounds-${{ hashFiles('cabal.project.freeze') }}

      - run: make lower-bounds-check-deploy


  # Run Stylish Haskell to check for errant code formatting
  misspellings:
    name: Spelling Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2.3.4
    - uses: haskell/actions/setup@v1.1.5
    - run: make spelling-check


  # Check that the project has no anti-patterns
  stan:
    name: Static Analysis Check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2.3.4
      - uses: haskell/actions/setup@v1.1.5
        name: Setup Haskell
        with:
          cabal-version: latest
          ghc-version:   ${{ env.ghc_default }}
                  
      - run: make static-analysis-check-setup ghc=${{ env.ghc_default }} 

      - uses: actions/cache@v2
        name: caching static analysis check
        with:
          path: |
            bin
          key: ${{ runner.os }}-static-analysis-${{ hashFiles('cabal.project.freeze') }}

      - run: make static-analysis-check-deploy ghc=${{ env.ghc_default }} 


  # Cabal build matrix
  cabal-build-matrix:
    name: GHC-${{ matrix.ghc }}, cabal${{matrix.cabal}}, ${{matrix.os}}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        ghc:   [ '7.10.3', '8.0.2', '8.2.2', '8.4.4', '8.6.5', '8.8.4', '8.10.4', '9.0.1' ]
        cabal: [ latest ]
        os:    [ ubuntu-latest ]

    steps:
      - uses: actions/checkout@v2.3.4
      - name: Setup Haskell
        uses: haskell/actions/setup@v1.1.5
        with:
          ghc-version:   ${{ matrix.ghc   }}
          cabal-version: ${{ matrix.cabal }}

      - run: gcc    --version
      - run: g++    --version
      - run: ghc    --version

      - run: make compilation-check-setup ghc=${{ matrix.ghc }}

      - uses: actions/cache@v2
        name: windows caching
        with:
          path: |
            c:\sr
            dist-newstyle
          key: ${{ runner.os }}-${{ matrix.ghc }}-${{ hashFiles('cabal.project.freeze') }}
          # restore keys is a fall back when the freeze plan is different
          restore-keys: |
            ${{ runner.os }}-${{ matrix.ghc }}-
        if:  matrix.os == 'windows-latest'
      - uses: actions/cache@v2
        name: ubuntu-linux and osx caching
        with:
          path: |
            ~/.cabal/store
            dist-newstyle
          key: ${{ runner.os }}-${{ matrix.ghc }}-${{ hashFiles('cabal.project.freeze') }}
          # restore keys is a fall back when the freeze plan is different
          restore-keys: |
            ${{ runner.os }}-${{ matrix.ghc }}-
        if:  matrix.os != 'windows-latest'

      - run: make compilation-check-deploy ghc=${{ matrix.ghc }}
